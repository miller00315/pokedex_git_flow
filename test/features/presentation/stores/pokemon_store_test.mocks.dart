// Mocks generated by Mockito 5.1.0 from annotations
// in poke_dex/test/features/presentation/stores/pokemon_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:poke_dex/core/error/failures.dart' as _i7;
import 'package:poke_dex/core/usecase/usecase.dart' as _i9;
import 'package:poke_dex/features/data/models/pokemon_list_model.dart' as _i8;
import 'package:poke_dex/features/domain/repositories/pokemon_repository.dart'
    as _i2;
import 'package:poke_dex/features/domain/repositories/secure_storage_repository.dart'
    as _i4;
import 'package:poke_dex/features/domain/usecases/fetch_favorites_usecase.dart'
    as _i10;
import 'package:poke_dex/features/domain/usecases/fetch_pokemon_usecase.dart'
    as _i5;
import 'package:poke_dex/features/domain/usecases/set_favorites_usecase.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePokemonRepository_0 extends _i1.Fake
    implements _i2.PokemonRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeSecureStorageRepository_2 extends _i1.Fake
    implements _i4.SecureStorageRepository {}

/// A class which mocks [FetchPokemonUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPokemonUseCase extends _i1.Mock
    implements _i5.FetchPokemonUseCase {
  MockFetchPokemonUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get pokemonRepository =>
      (super.noSuchMethod(Invocation.getter(#pokemonRepository),
          returnValue: _FakePokemonRepository_0()) as _i2.PokemonRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.PokeListModel>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i7.Failure, _i8.PokeListModel>>.value(
              _FakeEither_1<_i7.Failure, _i8.PokeListModel>())) as _i6
          .Future<_i3.Either<_i7.Failure, _i8.PokeListModel>>);
}

/// A class which mocks [FetchFavoritesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchFavoritesUsecase extends _i1.Mock
    implements _i10.FetchFavoritesUsecase {
  MockFetchFavoritesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SecureStorageRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeSecureStorageRepository_2())
          as _i4.SecureStorageRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, List<int>>> call(_i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.Failure, List<int>>>.value(
                  _FakeEither_1<_i7.Failure, List<int>>()))
          as _i6.Future<_i3.Either<_i7.Failure, List<int>>>);
}

/// A class which mocks [SetFavoritesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetFavoritesUsecase extends _i1.Mock
    implements _i11.SetFavoritesUsecase {
  MockSetFavoritesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SecureStorageRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeSecureStorageRepository_2())
          as _i4.SecureStorageRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, void>> call(
          _i11.SetFavoritesParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.Failure, void>>.value(
                  _FakeEither_1<_i7.Failure, void>()))
          as _i6.Future<_i3.Either<_i7.Failure, void>>);
}
